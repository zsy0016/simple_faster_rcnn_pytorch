import numpy as np


def generate_anchor_base(base_size=16, ratios=[0.5, 1, 2], anchor_scales=[8, 16, 32]):
    """Generate anchor base windows by enumerating aspect ratio and scale.

    Generate anchors that are scaled and modified to the given aspect ratio. Area of a scaled 
    anchor is preserved when modifying to the given aspect ratio.

    This function generates :obj:`R = len(ratios) * len(anchor_scales)` anchors. The 
    :obj:`i * len(anchor_scales) + j` th anchor corresponds to an anchor generated by 
    :obj:`ratios[i]` and :obj:`anchor_scales[j]`.

    For example, if the scale is :math:`8` and the ratio is :math:`0.25`, the width and the height 
    of the base window will be stretched by :math:`8`. For modifying the anchor to the given aspect 
    ratio, the height is halved and the width is doubled.

    Args:
        base_size (number): The width and height of the reference window.
        ratios (list of floats): Ratios of width to height of the anchors.
        anchor_scales (list of numbers): Areas of anchors. These areas will be the product of 
            the  square of an element in :obj:`anchor_scales` and the original area of the 
            reference window.

    Returns:

        numpy.array
        
        An array of shape :math:`(R, 4)`. Each element is a set of coordinates of a bbox. 
        The second axis corresponds to :math:`(y_{min}, x_{min}, y_{max}, x_{max})` of a bbox.
    """
    
    py = base_size / 2.
    px = base_size / 2.

    anchor_base = np.zeros((len(ratios) * len(anchor_scales), 4), dtype=np.float32)
    for i in range(len(ratios)):
        for j in range(len(anchor_scales)):
            h = base_size * anchor_scales[j] * np.sqrt(ratios[i])
            w = base_size * anchor_scales[j] * np.sqrt(1. / ratios[i])
            index = i * len(anchor_scales) + j
            anchor_base[index, 0] = py - h / 2.
            anchor_base[index, 1] = px - w / 2.
            anchor_base[index, 2] = py + h / 2.
            anchor_base[index, 3] = px + w / 2.

    return anchor_base


def enumerate_anchor_base(anchor_base, feature_stride, height, width):
    shift_y = np.arange(0, height * feature_stride, feature_stride)
    shift_x = np.arange(0, width * feature_stride, feature_stride)
    shift_x, shift_y = np.meshgrid(shift_x, shift_y)
    shift = np.stack((shift_y.ravel(), shift_x.ravel(), shift_y.ravel(), shift_x.ravel()), axis=1)
    A = anchor_base.shape[0]
    K = shift.shape[0]
    anchor = anchor_base.reshape((1, A, 4)) + shift.reshape((1, K, 4)).transpose((1, 0, 2))
    anchor = anchor.reshape((K * A, 4)).astype(np.float32)

    return anchor